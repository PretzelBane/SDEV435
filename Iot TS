# IoT Troubleshooter
# SDEV-435
# Ron Pelak


# Header imports
######################################

from ctypes.wintypes import PSIZE
from distutils.cmd import Command
from email.utils import parsedate_to_datetime
import os
from tkinter import *
from tkinter import ttk, messagebox
from typing import Type
import pandas as pd
import csv
from datetime import datetime
import re


# Classes
######################################

# Datafile class: only one instance (datafile); handles the file iteself
class Datafile:
    ## initialization sets the first csv file from the standard director as the active datafile
    def __init__(self):
        self.__dir = "C://tshoot/datafiles"
        self.listDatafile = self.fileLister()
        self.__name = self.listDatafile[0]
        self.__path = self.__dir + "/" + self.__name
        self.__dictObject ={}
        self.__listObject =[]
        self.__dictDevice ={}
        self.__listType =[]
        self.__listTypeState =[]
        self.__listTypeDevice =[]
        self.__listDevice =[]
        self.__dictProtocol ={}
        self.__listProtocol =[]
        self.__mode = "Present"
        self.__listMode = ["Present", "Highlight"]
        self.fileActivator()
    ## getters & setters
    ### choice is manipulated with GUI widgets; transferred to name upon acceptance
    def nameGetter(self):
        return self.__name
    def modeGetter(self):
        return self.__mode
    def listModeGetter(self):
        return self.__listMode
    def dictObjectGetter(self):
        return self.__dictObject
    def listObjectGetter(self):
        return self.__listObject
    def dictDeviceGetter(self):
        return self.__dictDevice
    def listTypeGetter(self):
        return self.__listType
    def listTypeStateGetter(self):
        return self.__listTypeState
    def listTypeDeviceGetter(self):
        return self.__listTypeDevice
    def dictProtocolGetter(self):
        return self.__dictProtocol
    def listProtocolGetter(self):
        return self.__listProtocol
    def nameProtocolActiveGetter(self):
        return self.__nameProtocolActive
    def nameSetter(self, pname):
        self.__name = pname
        self.__path = self.__dir + "/" + self.__name
    def modeSetter(self, pmode):
        self.__mode = pmode
    def nameProtocolActiveSetter(self, pname):
        self.__nameProtocolActive = pname
    ## helper function t get list of csv filenames
    def fileLister(self):
        filelist = os.listdir(self.__dir)
        return [file for file in filelist if file.endswith(".csv")]
    ## updates the device dictionary
    def deviceDictUpdater(self, ptype, plist):
        self.__dictDevice.update({ptype : plist})  
    ## activates a datafile
    def fileActivator(self):
        ### load the csv file into the dataframe (df)
        self.df = pd.read_csv(self.__path)
        ## add at datetime column and populate from csv data
        self.df['datetime'] = self.df['Month'].astype(str)+'.'+self.df['Day'].astype(str)+'.'+self.df['Year'].astype(str)+' '+self.df['Hour'].astype(str)+':'+self.df['Minute'].astype(str)+':'+self.df['Second'].astype(str)
        self.df['datetime'] = pd.to_datetime(self.df['datetime'], infer_datetime_format=True)
        ## build a class for each unique object in the datafile
        ### also create a new dictionary of name : class pairs & a list of just objects for easy reference
        self.__dictObject.clear()
        self.__listObject.clear()
        for obj in self.df['Device'].unique():
            self.__dictObject.update({obj : Object(obj)})
            self.__listObject.append(Object(obj))
        ### loop through the newly created object class instances and add type & list of positions to each
        for name, obj in self.__dictObject.items():
            self.__fdf = self.df[self.df.Device == name]
            obj.typeSetter(self.__fdf['Type'].iloc[0])
            obj.listPositionSetter(self.__fdf['Value'].unique())
        ## build a lists of object types & a dictionary of types and their associated object names
        ### build the type list
        self.__listType.clear()
        self.__dictDevice.clear()
        for type in self.df['Type'].unique():
            self.__listType.append(type)
            if (type == "State"):
                self.__listTypeState.append(type)
            else:
                self.__listTypeDevice.append(type)    
        ### build the dictionary of types : list of devices
        for type in self.__listType:
            #### filter the dataframe to one of the types
            self.__fdf = self.df[self.df.Type == type]
            #### build a list of devices for the type
            listDevice = []
            for obj in self.__fdf['Device'].unique():
                listDevice.append(obj)
            #### add the type : list of devices to the dictionary    
            self.deviceDictUpdater(type, listDevice)
        ## from the config file, load and create protocols previously created for this datafile       
        with open("C://tshoot/utility/configProtocol.csv") as file_obj:
            heading = next(file_obj)
            reader_obj = csv.reader(file_obj)
            for col in reader_obj:
                if col[1] == self.__name:
                    dts = datetime(int(col[2]), int(col[3]), int(col[4]), int(col[5]), int(col[6]), int(col[7]), 0)
                    dte = datetime(int(col[8]), int(col[9]), int(col[10]), int(col[11]), int(col[12]), int(col[13]), 0)
                    self.__dictProtocol.update({col[0] : Protocol(col[0], col[1], col[2], col[3], col[4], col[5], col[6], col[7], col[8], col[9], col[10], col[11], col[12], col[13], dts, dte, col[14], col[15], col[16], col[17], col[18], col[19], col[20], col[21], col[22], col[23], col[24], col[25])})
                    self.__listProtocol.append(col[0])
                    self.__nameProtocolActive = col[0]
    def protocolAdder(self, pname):
        ## set some default dates
        dts = datetime(2023, 1, 1, 0, 0, 0, 0)
        dte = datetime(2023, 1, 1, 0, 0, 0, 0)
        ## create the object while adding to dictionary then also add name to list and make it active
        self.__dictProtocol.update({pname : Protocol("", datafile.nameGetter(), "2023", "1", "1", "0", "0", "0", "2023", "1", "1", "0", "0", "0", dts, dte, "", "", "", 0, 0, 0, "", "", "", "", "", 0)})
        self.__listProtocol.append(pname)
        self.__nameProtocolActive = pname


# Object class: one instance for each device or state-variable found in the datafile
class Object:
    # initialization
    def __init__(self, pname):
        self.__name = pname
    # getters
    def nameGetter(self):
        return self.__name
    def typeGetter(self):
        return self.__type
    def listPositionGetter(self):
        return self.__listPosition
    # setters
    def nameSetter(self, pname):
        self.__name = pname
    def typeSetter(self, ptype):
        self.__type = ptype
    def listPositionSetter(self, plstpos):
        self.__listPosition = plstpos


# Protocol class: one instance for each saved protocol
class Protocol:
    # initialization; optional attributes default to NULL
    def __init__(self, pname, pfile, pyearS, pmonthS, pdayS, phourS, pminuteS, psecondS, pyearE, pmonthE, pdayE, phourE, pminuteE, psecondE, pdatetimeS, pdatetimeE, ptypeF=None, pobjF=None, pposF=None, pflagC=0, pflagB=0, pflagT=0, ptypeC=None, pobjC=None, pposC=None, psizeB=None, pparamT=None, pvalT=None):
        self.__path = "C://tshoot/utility/configProtocol.csv"
        self.__name = pname
        self.__file = pfile
        self.__yearStart = pyearS
        self.__monthStart = pmonthS
        self.__dayStart = pdayS
        self.__hourStart = phourS
        self.__minuteStart = pminuteS
        self.__secondStart = psecondS
        self.__yearEnd = pyearE
        self.__monthEnd = pmonthE
        self.__dayEnd = pdayE
        self.__hourEnd = phourE
        self.__minuteEnd = pminuteE
        self.__secondEnd = psecondE
        self.__datetimeStart = pdatetimeS
        self.__datetimeEnd = pdatetimeE
        self.__focusType = ptypeF
        self.__focusObject = pobjF
        self.__focusPosition = pposF
        self.__flagCondition = pflagC
        self.__flagBucket = pflagB
        self.__flagThreshold = pflagT
        self.__conditionType = ptypeC
        self.__conditionObject = pobjC
        self.__conditionPosition = pposC
        self.__bucketSize = psizeB
        self.__thresholdParameter = pparamT
        self.__thresholdValue = pvalT
    # getter functions
    def nameGetter(self):
        return self.__name
    def fileGetter(self):
        return self.__file
    def yearStartGetter(self):
        return self.__yearStart
    def monthStartGetter(self):
        return self.__monthStart
    def dayStartGetter(self):
        return self.__dayStart
    def hourStartGetter(self):
        return self.__hourStart
    def minuteStartGetter(self):
        return self.__minuteStart
    def secondStartGetter(self):
        return self.__secondStart
    def yearEndGetter(self):
        return self.__yearEnd
    def monthEndGetter(self):
        return self.__monthEnd
    def dayEndGetter(self):
        return self.__dayEnd
    def hourEndGetter(self):
        return self.__hourEnd
    def minuteEndGetter(self):
        return self.__minuteEnd
    def secondEndGetter(self):
        return self.__secondEnd
    def datetimeStartGetter(self):
        return self.__datetimeStart
    def datetimeEndGetter(self):
        return self.__datetimeEnd
    def focusTypeGetter(self):
        return self.__focusType
    def focusObjectGetter(self):
        return self.__focusObject
    def focusPositionGetter(self):
        return self.__focusPosition
    def flagConditionGetter(self):
        return self.__flagCondition
    def flagBucketGetter(self):
        return self.__flagBucket
    def flagThresholdGetter(self):
        return self.__flagThreshold
    def conditionTypeGetter(self):
        return self.__conditionType
    def conditionObjectGetter(self):
        return self.__conditionObject
    def conditionPositionGetter(self):
        return self.__conditionPosition
    def bucketSizeGetter(self):
        return self.__bucketSize
    def thresholdParameterGetter(self):
        return self.__thresholdParameter
    def thresholdValueGetter(self):
        return self.__thresholdValue
    def protocolUpdater(self, pname, pyearS, pmonthS, pdayS, phourS, pminuteS, psecondS, pyearE, pmonthE, pdayE, phourE, pminuteE, psecondE, pdatetimeS, pdatetimeE, ptypeF=None, pobjF=None, pposF=None, pflagC=0, pflagB=0, pflagT=0, ptypeC=None, pobjC=None, pposC=None, psizeB=None, pparamT=None, pvalT=None):
        self.__name = pname
        self.__yearStart = pyearS
        self.__monthStart = pmonthS
        self.__dayStart = pdayS
        self.__hourStart = phourS
        self.__minuteStart = pminuteS
        self.__secondStart = psecondS
        self.__yearEnd = pyearE
        self.__monthEnd = pmonthE
        self.__dayEnd = pdayE
        self.__hourEnd = phourE
        self.__minuteEnd = pminuteE
        self.__secondEnd = psecondE
        self.__datetimeStart = pdatetimeS
        self.__datetimeEnd = pdatetimeE
        self.__focusType = ptypeF
        self.__focusObject = pobjF
        self.__focusPosition = pposF
        self.__flagCondition = pflagC
        self.__flagBucket = pflagB
        self.__flagThreshold = pflagT
        self.__conditionType = ptypeC
        self.__conditionObject = pobjC
        self.__conditionPosition = pposC
        self.__bucketSize = psizeB
        self.__thresholdParameter = pparamT
        self.__thresholdValue = pvalT




# Main functions
######################################





# Start main program
######################################

# Initial setup of the Datafile class instance
datafile = Datafile()



# Start GUI
######################################

# root window start
root = Tk()
root.title("IoT Troubleshooter")
root.iconbitmap('c:/tshoot/logo.ico')
root.geometry("600x600")


# ttk Styles
######################################

# style configuration
style = ttk.Style()
style.theme_use('default')

style.configure('Accept.TButton', background='olivedrab', foreground='black', padx=1, pady=1) 
style.configure('Cancel.TButton', background='indian red', foreground="black", padx=1, pady=1)
style.configure('Standard.TEntry', background='cornsilk', padx=1, pady=1)
style.configure('Standard.TCombobox', background='cornsilk', padx=1, pady=1)
style.configure('Standard.TCheckbutton', background='cornsilk', padx=1, pady=1, indicatordiameter='30', indicatormargin='0')
style.configure('File.TFrame', background='lightsteelblue')
style.configure('File.TLabel', background='lightsteelblue4', foreground="white", padx=1, pady=1)
style.configure('Protocol.TFrame', background='sienna1')
style.configure('Protocol.TLabel', background='sienna4', foreground="white", padx=1, pady=1)
style.configure('Result.TFrame', background='mediumPurple1')
style.configure('Result.TLabel', background='mediumpurple4', foreground="white", padx=1, pady=1)


# Initial Declarations
######################################


# initial variable declarations & assignments
directoryDatafiles=StringVar()
directoryDatafiles.set("C://tshoot/datafiles")
directoryUtility=StringVar()
directoryUtility.set("C://tshoot/utility")
# text variables for frame widgets
txtvarActive = StringVar()
txtvarActive.set(datafile.nameGetter() + " -> " + datafile.nameProtocolActiveGetter())
txtvarFile = StringVar()
txtvarFile.set(datafile.nameGetter())
txtvarProtocol = StringVar()
txtvarProtocol.set(datafile.nameProtocolActiveGetter())
# text & integer variables for the protocol constructor frame
txtYearStart = StringVar()
txtMonthStart = StringVar()
txtDayStart = StringVar()
txtHourStart = StringVar()
txtMinuteStart = StringVar()
txtSecondStart = StringVar()
txtYearEnd = StringVar()
txtMonthEnd = StringVar()
txtDayEnd = StringVar()
txtHourEnd = StringVar()
txtMinuteEnd = StringVar()
txtSecondEnd = StringVar()
intFlagCond = IntVar()
txtProtocolName = StringVar()


# GUI Functions
######################################

# menu bar functions
def frameHider():
    frameActivateFile.pack_forget()
    frameNewProtocol.pack_forget()
    frameActivateProtocol.pack_forget()
    frameConstructProtocol.pack_forget()
    frameViewResult.pack_forget()
def fileActivator():
    frameHider()
    frameActivateFile.pack(fill='both',expand=1)
def protocolNew():
    frameHider()
    frameNewProtocol.pack(fill='both',expand=1)
def protocolActivator():
    frameHider()
    frameActivateProtocol.pack(fill='both',expand=1)
    ## default field contents to the active protocol
    fieldAPProtocol.set(datafile.nameProtocolActiveGetter())
def protocolConstructor():
    frameHider()
    frameConstructProtocol.pack(fill='both',expand=1)
    ## update textvariables to parameters associated with the active protocol
    txtYearStart.set(datafile.dictProtocolGetter().get(datafile.nameProtocolActiveGetter()).yearStartGetter())
    txtMonthStart.set(datafile.dictProtocolGetter().get(datafile.nameProtocolActiveGetter()).monthStartGetter())
    txtDayStart.set(datafile.dictProtocolGetter().get(datafile.nameProtocolActiveGetter()).dayStartGetter())
    txtHourStart.set(datafile.dictProtocolGetter().get(datafile.nameProtocolActiveGetter()).hourStartGetter())
    txtMinuteStart.set(datafile.dictProtocolGetter().get(datafile.nameProtocolActiveGetter()).minuteStartGetter())
    txtSecondStart.set(datafile.dictProtocolGetter().get(datafile.nameProtocolActiveGetter()).secondStartGetter())
    txtYearEnd.set(datafile.dictProtocolGetter().get(datafile.nameProtocolActiveGetter()).yearEndGetter())
    txtMonthEnd.set(datafile.dictProtocolGetter().get(datafile.nameProtocolActiveGetter()).monthEndGetter())
    txtDayEnd.set(datafile.dictProtocolGetter().get(datafile.nameProtocolActiveGetter()).dayEndGetter())
    txtHourEnd.set(datafile.dictProtocolGetter().get(datafile.nameProtocolActiveGetter()).hourEndGetter())
    txtMinuteEnd.set(datafile.dictProtocolGetter().get(datafile.nameProtocolActiveGetter()).minuteEndGetter())
    txtSecondEnd.set(datafile.dictProtocolGetter().get(datafile.nameProtocolActiveGetter()).secondEndGetter())
    intFlagCond.set(datafile.dictProtocolGetter().get(datafile.nameProtocolActiveGetter()).flagConditionGetter())
    txtProtocolName.set(datafile.nameProtocolActiveGetter())
    ## set some fields to pre-populate
    fieldCPFocusType.set(datafile.dictProtocolGetter().get(datafile.nameProtocolActiveGetter()).focusTypeGetter())
    fieldCPFocusObject.set(datafile.dictProtocolGetter().get(datafile.nameProtocolActiveGetter()).focusObjectGetter())
    fieldCPFocusPosition.set(datafile.dictProtocolGetter().get(datafile.nameProtocolActiveGetter()).focusPositionGetter())
    fieldCPConditionType.set(datafile.dictProtocolGetter().get(datafile.nameProtocolActiveGetter()).conditionTypeGetter())
    fieldCPConditionObject.set(datafile.dictProtocolGetter().get(datafile.nameProtocolActiveGetter()).conditionObjectGetter())
    fieldCPConditionPosition.set(datafile.dictProtocolGetter().get(datafile.nameProtocolActiveGetter()).conditionPositionGetter())
    ## pre-set the value lists for dependent comboboxes
    fieldCPFocusObject['value'] = datafile.dictDeviceGetter().get(fieldCPFocusType.get())
    fieldCPConditionObject['value'] = datafile.dictDeviceGetter().get(fieldCPConditionType.get())
def resultModeChanger():
    frameHider()
    frameChangeResultMode.pack(fill='both',expand=1)
def resultViewer():
    frameHider()
    frameViewResult.pack(fill='both',expand=1)
def exitExiter():
    exit(0)


# multi-frame widget functions
def canceller():
    frameHider()




# frameActivateFile widget functions
## coming from button buttonAccept; sets name and activates
def datafileActivateAccepter():
   datafile.nameSetter(fieldAFDatafile.get())
   datafile.fileActivator()
   txtvarActive.set(fieldAFDatafile.get() + " -> " + datafile.nameProtocolActiveGetter())
   txtvarFile.set(datafile.nameGetter())
   frameHider()

# frameNewProtocol widget functions
## coming from button buttonAccept; creates a new protocol object and brings up the constructor frame
def protocolNewAccepter():
    ### validate name; check that it's not already in use for the active datafile
    error = 0
    for name in datafile.listProtocolGetter():
        if (name == entryNPName.get()):
            error = 1
            messagebox.showerror("Error","Duplicate Name")
            break
    if (error == 0):
        ### create a new, generic protocol & designate it as active
        datafile.protocolAdder(entryNPName.get())
        ### open the constructor frame and populate with the newly-created, generic data; ready for entry
        protocolConstructor()
        ### update widget values
        txtvarActive.set(datafile.nameGetter() + " -> " + datafile.nameProtocolActiveGetter())
        txtvarProtocol.set(datafile.nameProtocolActiveGetter())
        fieldAPProtocol['values'] = datafile.listProtocolGetter()

# frameActivateProtocol widget functions
## coming from button buttonAccept; sets active protocol in datafile
def protocolActivateAccepter():
    datafile.nameProtocolActiveSetter(fieldAPProtocol.get())
    txtvarActive.set(datafile.nameGetter() + " -> " + datafile.nameProtocolActiveGetter())
    txtvarProtocol.set(datafile.nameProtocolActiveGetter())
    ###... add actions to apply activated protocol to datafile
    frameHider()

# frameConstructProtocol widget functions
## coming from button buttonAccept;
def protocolConstructAccepter():
    # validate entries
    error = 0
    ## check for blank fields
    if (entryCPStartYear.get() == "" or entryCPStartMonth.get() == "" or entryCPStartDay.get() == "" or entryCPStartHour.get() == "" or entryCPStartMinute.get() == "" or entryCPStartSecond.get() == ""):
        error = 1
        messagebox.showerror("Error","Start-date contains blank")
    if (entryCPEndYear.get() == "" or entryCPEndMonth.get() == "" or entryCPEndDay.get() == "" or entryCPEndHour.get() == "" or entryCPEndMinute.get() == "" or entryCPEndSecond.get() == ""):
        error = 1
        messagebox.showerror("Error","End-date contains blank")
    if (fieldCPFocusType.get() == "" or fieldCPFocusObject.get() == "" or fieldCPFocusPosition.get() == ""):
        error = 1
        messagebox.showerror("Error","Focus-device contains blank")
    if (intFlagCond.get() == 1) and ((fieldCPConditionType.get() == "" or fieldCPConditionObject.get() == "" or fieldCPConditionPosition.get() == "")):
        error = 1
        messagebox.showerror("Error","Condition-state contains blank")
    if (entryCPName.get() == "" ):
        error = 1
        messagebox.showerror("Error","Name contains blank")
    ## check date ranges are within what exists in dataset
    dts = datetime(int(entryCPStartYear.get()), int(entryCPStartMonth.get()), int(entryCPStartDay.get()), int(entryCPStartHour.get()), int(entryCPStartMinute.get()), int(entryCPStartSecond.get()), 0)
    dte = datetime(int(entryCPEndYear.get()), int(entryCPEndMonth.get()), int(entryCPEndDay.get()), int(entryCPEndHour.get()), int(entryCPEndMinute.get()), int(entryCPEndSecond.get()), 0)
    if (dts < datafile.dictProtocolGetter().get(datafile.nameProtocolActiveGetter()).datetimeStartGetter() or dts > datafile.dictProtocolGetter().get(datafile.nameProtocolActiveGetter()).datetimeEndGetter()):
        error = 1
        messagebox.showerror("Error","Start-date out of range")
    if (dte < datafile.dictProtocolGetter().get(datafile.nameProtocolActiveGetter()).datetimeStartGetter() or dte > datafile.dictProtocolGetter().get(datafile.nameProtocolActiveGetter()).datetimeEndGetter()):
        error = 1
        messagebox.showerror("Error","End-date out of range")
    if (dte < dts):
        error = 1
        messagebox.showerror("Error","End-date before Start-date")
    ## check if a changed name is alredy in use
    if (datafile.nameProtocolActiveGetter() != entryCPName.get()):
        for name in datafile.listProtocolGetter():
            if (name == entryCPName.get()):
                error = 1
                messagebox.showerror("Error","Duplicate Name")
                break



    #... add more validation checks here

    ## if no error, update the protocol
    if (error == 0):
        datafile.dictProtocolGetter().get(datafile.nameProtocolActiveGetter()).protocolUpdater(entryCPName.get(), entryCPStartYear.get(), entryCPStartMonth.get(), entryCPStartDay.get(), entryCPStartHour.get(), entryCPStartMinute.get(), entryCPStartSecond.get(), entryCPEndYear.get(), entryCPEndMonth.get(), entryCPEndDay.get(), entryCPEndHour.get(), entryCPEndMinute.get(), entryCPEndSecond.get(), dts, dte, fieldCPFocusType.get(), fieldCPFocusObject.get(), fieldCPFocusPosition.get(), intFlagCond.get(), 0, 0, fieldCPConditionType.get(), fieldCPConditionObject.get(), fieldCPConditionPosition.get(), "", "", 0)
        frameHider()


## field entry validation functions
def startYearValidator(input): 
    if ((input.isdigit() and int(input)>=2023) or input == ""): return True
    else: entryCPStartYear.delete(0, END); return False
sYearVal = root.register(startYearValidator)
def endYearValidator(input): 
    if ((input.isdigit() and int(input)>=2023) or input == ""): return True
    else: entryCPEndYear.delete(0, END); return False
eYearVal = root.register(endYearValidator)
def startMonthValidator(input): 
    if ((input.isdigit() and int(input)>=1 and int(input)<=12) or input == ""): return True
    else: entryCPStartMonth.delete(0, END); return False
sMonthVal = root.register(startMonthValidator)
def endMonthValidator(input): 
    if ((input.isdigit() and int(input)>=1 and int(input)<=12) or input == ""): return True
    else: entryCPEndMonth.delete(0, END); return False
eMonthVal = root.register(endMonthValidator)
def startDayValidator(input): 
    if ((input.isdigit() and int(input)>=1 and int(input)<=31) or input == ""): return True
    else: entryCPStartDay.delete(0, END); return False
sDayVal = root.register(startDayValidator)
def endDayValidator(input): 
    if ((input.isdigit() and int(input)>=1 and int(input)<=31) or input == ""): return True
    else: entryCPEndDay.delete(0, END); return False
eDayVal = root.register(endDayValidator)
def startHourValidator(input): 
    if ((input.isdigit() and int(input)>=0 and int(input)<=12) or input == ""): return True
    else: entryCPStartHour.delete(0, END); return False
sHourVal = root.register(startHourValidator)
def endHourValidator(input): 
    if ((input.isdigit() and int(input)>=0 and int(input)<=12) or input == ""): return True
    else: entryCPEndHour.delete(0, END); return False
eHourVal = root.register(endHourValidator)
def startMinuteValidator(input): 
    if ((input.isdigit() and int(input)>=0 and int(input)<=60) or input == ""): return True
    else: entryCPStartMinute.delete(0, END); return False
sMinuteVal = root.register(startMinuteValidator)
def endMinuteValidator(input): 
    if ((input.isdigit() and int(input)>=0 and int(input)<=60) or input == ""): return True
    else: entryCPEndMinute.delete(0, END); return False
eMinuteVal = root.register(endMinuteValidator)
def startSecondValidator(input): 
    if ((input.isdigit() and int(input)>=0 and int(input)<=60) or input == ""): return True
    else: entryCPStartSecond.delete(0, END); return False
sSecondVal = root.register(startSecondValidator)
def endSecondValidator(input): 
    if ((input.isdigit() and int(input)>=0 and int(input)<=60) or input == ""): return True
    else: entryCPEndSecond.delete(0, END); return False
eSecondVal = root.register(endSecondValidator)
## clean and update picklists for downstream comboboxes
def focusTypeChooser(event):
    fieldFocusObject['value'] = datafile.dictDeviceGetter().get(fieldCPFocusType.get())
    fieldCPFocusObject.set("")
    fieldCPFocusPosition.set("")
def focusObjectChooser(event):
    listTemp = []
    for pos in datafile.dictObjectGetter().get(fieldCPFocusObject.get()).listPositionGetter():
        listTemp.append(pos) 
    fieldCPFocusPosition['value'] = listTemp
    fieldCPFocusPosition.set("")
def conditionTypeChooser(event):
    fieldConditionObject['value'] = datafile.dictDeviceGetter().get(fieldCPConditionType.get())
    fieldCPConditionObject.set("")
    fieldCPConditionPosition.set("")
def conditionObjectChooser(event):
    listTemp = []
    for pos in datafile.dictObjectGetter().get(fieldCPConditionObject.get()).listPositionGetter():
        listTemp.append(pos) 
    fieldCPConditionPosition['value'] = listTemp
    fieldCPConditionPosition.set("")


# frameViewResult widget functions
## coming from button buttonAccept; displays results
def resultViewAccepter():
   datafile.modeSetter(fieldRVMode.get())
   ###... actions to bring up the result window with treeview
   frameHider()

# GUI Widgets
######################################

    
# widgets for menu bar
## top menu
menuTop = Menu(root)
root.config(menu=menuTop)
menuFiles = Menu(menuTop)
menuProtocols=Menu(menuTop)
menuResults=Menu(menuTop)
menuExit=Menu(menuTop)
## files menus
menuTop.add_cascade(label="Files", menu=menuFiles)
menuFiles.add_command(label="Activate", command=fileActivator)
## protocol menus
menuTop.add_cascade(label="Protocols", menu=menuProtocols)
menuProtocols.add_command(label="New", command=protocolNew)
menuProtocols.add_command(label="Activate", command=protocolActivator)
menuProtocols.add_command(label="Construct", command=protocolConstructor)
## results menus
menuTop.add_cascade(label="Results", menu=menuResults)
menuResults.add_command(label="View", command=resultViewer)
## exit menus
menuTop.add_cascade(label="Exit", menu=menuExit)
menuExit.add_command(label="Exit", command=exitExiter)

# frames
frameActivateFile=ttk.Frame(root, style="File.TFrame")
frameNewProtocol=ttk.Frame(root, style="Protocol.TFrame")
frameActivateProtocol=ttk.Frame(root, style="Protocol.TFrame")
frameConstructProtocol=ttk.Frame(root, style="Protocol.TFrame")
frameViewResult=ttk.Frame(root, style="Result.TFrame")



# widgets for frameActivateFile
## banner
bannerActivateFileL=ttk.Label(frameActivateFile, text="Datafile / Activate", style="File.TLabel")
bannerActivateFileL.place(relx=.0, rely=0, relwidth=.5, relheight=.04)
bannerActivateFileR=ttk.Label(frameActivateFile, textvariable=txtvarActive, style="File.TLabel", anchor=E)
bannerActivateFileR.place(relx=.5, rely=0, relwidth=.5, relheight=.04)
## labels
labelAFDatafile=ttk.Label(frameActivateFile, text="DataFile", style="File.TLabel")
labelAFDatafile.place(relx=.02, rely=.06, relwidth=.2, relheight=.04)
## input fields
### datafile selection combobox runs datafileChooser function, selected file is in textvariable of field
fieldAFDatafile = ttk.Combobox(frameActivateFile, value=datafile.listDatafile, style="Standard.TCombobox")
fieldAFDatafile.current(0)
fieldAFDatafile.place(relx=.25, rely=.06, relwidth=.73, relheight=.04)
## accept & cancel buttons
buttonAFAccept = ttk.Button(frameActivateFile, text="Accept", style="Accept.TButton", command=datafileActivateAccepter)
buttonAFAccept.place(relx=.02, rely=.92, relwidth=.1, relheight=.04)
buttonAFCancel = ttk.Button(frameActivateFile, text="Cancel", style="Cancel.TButton", command=canceller)
buttonAFCancel.place(relx=.14, rely=.92, relwidth=.1, relheight=.04)

# widgets for frameNewProtocol
## banner
bannerNewProtocolL=ttk.Label(frameNewProtocol, text="Protocol / New", style="Protocol.TLabel")
bannerNewProtocolL.place(relx=.0, rely=0, relwidth=.5, relheight=.04)
bannerNewProtocolR=ttk.Label(frameNewProtocol, textvariable=txtvarActive, style="Protocol.TLabel", anchor=E)
bannerNewProtocolR.place(relx=.5, rely=0, relwidth=.5, relheight=.04)
## labels
labelNPName=ttk.Label(frameNewProtocol, text="Name", style="Protocol.TLabel")
labelNPName.place(relx=.02, rely=.06, relwidth=.2, relheight=.04)
## fields
entryNPName=ttk.Entry(frameNewProtocol, style="Standard.TEntry") #textvariable=txtProtocolName, 
entryNPName.place(relx=.25, rely=.06, relwidth=.4, relheight=.04)
## accept & cancel buttons
buttonNPAccept = ttk.Button(frameNewProtocol, text="Accept", style="Accept.TButton", command=protocolNewAccepter)
buttonNPAccept.place(relx=.02, rely=.92, relwidth=.1, relheight=.04)
buttonNPCancel = ttk.Button(frameNewProtocol, text="Cancel", style="Cancel.TButton", command=canceller)
buttonNPCancel.place(relx=.14, rely=.92, relwidth=.1, relheight=.04)


# widgets for frameActivateProtocol
## banner
bannerActivateProtocolL=ttk.Label(frameActivateProtocol, text="Protocol / Activate", style="Protocol.TLabel")
bannerActivateProtocolL.place(relx=.0, rely=0, relwidth=.5, relheight=.04)
bannerActivateProtocolR=ttk.Label(frameActivateProtocol, textvariable=txtvarActive, style="Protocol.TLabel", anchor=E)
bannerActivateProtocolR.place(relx=.5, rely=0, relwidth=.5, relheight=.04)
## labels
labelAPProtocol=ttk.Label(frameActivateProtocol, text="Protocol", style="Protocol.TLabel")
labelAPProtocol.place(relx=.02, rely=.06, relwidth=.2, relheight=.04)
## input fields
### datafile selection combobox runs datafileChooser function, selected file is in textvariable of field
fieldAPProtocol = ttk.Combobox(frameActivateProtocol, values=datafile.listProtocolGetter(), style="Standard.TCombobox")
fieldAPProtocol.current(0)
fieldAPProtocol.place(relx=.25, rely=.06, relwidth=.4, relheight=.04)
## accept & cancel buttons
buttonAPAccept = ttk.Button(frameActivateProtocol, text="Accept", style="Accept.TButton", command=protocolActivateAccepter)
buttonAPAccept.place(relx=.02, rely=.92, relwidth=.1, relheight=.04)
buttonAPCancel = ttk.Button(frameActivateProtocol, text="Cancel", style="Cancel.TButton", command=canceller)
buttonAPCancel.place(relx=.14, rely=.92, relwidth=.1, relheight=.04)




# widgets for ConstructProtocol
## banner
bannerConstructProtocolL=ttk.Label(frameConstructProtocol, text="Protocol / Construct", style="Protocol.TLabel")
bannerConstructProtocolL.place(relx=.0, rely=0, relwidth=.5, relheight=.04)
bannerConstructProtocolR=ttk.Label(frameConstructProtocol, textvariable=txtvarActive, style="Protocol.TLabel", anchor=E)
bannerConstructProtocolR.place(relx=.5, rely=0, relwidth=.5, relheight=.04)
## labels
labelCPStart=ttk.Label(frameConstructProtocol, text="Start", style="Protocol.TLabel")
labelCPStart.place(relx=.02, rely=.12, relwidth=.15, relheight=.04)
labelCPEnd=ttk.Label(frameConstructProtocol, text="End", style="Protocol.TLabel")
labelCPEnd.place(relx=.02, rely=.18, relwidth=.15, relheight=.04)
labelCPYear=ttk.Label(frameConstructProtocol, text="Year", style="Protocol.TLabel")
labelCPYear.place(relx=.25, rely=.06, relwidth=.08, relheight=.04)
labelCPMonth=ttk.Label(frameConstructProtocol, text="Month", style="Protocol.TLabel")
labelCPMonth.place(relx=.35, rely=.06, relwidth=.08, relheight=.04)
labelCPDay=ttk.Label(frameConstructProtocol, text="Day", style="Protocol.TLabel")
labelCPDay.place(relx=.45, rely=.06, relwidth=.08, relheight=.04)
labelCPHour=ttk.Label(frameConstructProtocol, text="Hour", style="Protocol.TLabel")
labelCPHour.place(relx=.55, rely=.06, relwidth=.08, relheight=.04)
labelCPMinute=ttk.Label(frameConstructProtocol, text="Minute", style="Protocol.TLabel")
labelCPMinute.place(relx=.65, rely=.06, relwidth=.08, relheight=.04)
labelCPSecond=ttk.Label(frameConstructProtocol, text="Second", style="Protocol.TLabel")
labelCPSecond.place(relx=.75, rely=.06, relwidth=.08, relheight=.04)
labelCPFocus=ttk.Label(frameConstructProtocol, text="Focus", style="Protocol.TLabel")
labelCPFocus.place(relx=.02, rely=.30, relwidth=.15, relheight=.04)
labelCPCondition=ttk.Label(frameConstructProtocol, text="Condition", style="Protocol.TLabel")
labelCPCondition.place(relx=.02, rely=.36, relwidth=.15, relheight=.04)
labelCPType=ttk.Label(frameConstructProtocol, text="Type", style="Protocol.TLabel")
labelCPType.place(relx=.25, rely=.24, relwidth=.18, relheight=.04)
labelCPObject=ttk.Label(frameConstructProtocol, text="Object", style="Protocol.TLabel")
labelCPObject.place(relx=.45, rely=.24, relwidth=.28, relheight=.04)
labelCPPosition=ttk.Label(frameConstructProtocol, text="Position", style="Protocol.TLabel")
labelCPPosition.place(relx=.75, rely=.24, relwidth=.18, relheight=.04)
labelCPName=ttk.Label(frameConstructProtocol, text="Name", style="Protocol.TLabel")
labelCPName.place(relx=.02, rely=.84, relwidth=.18, relheight=.04)

## input fields
entryCPStartYear=ttk.Entry(frameConstructProtocol, textvariable=txtYearStart, style="Standard.TEntry")
entryCPStartYear.place(relx=.25, rely=.12, relwidth=.08, relheight=.04)
entryCPStartYear.config(validate="focusout", validatecommand=(sYearVal, '%P'))
entryCPEndYear=ttk.Entry(frameConstructProtocol, textvariable=txtYearEnd, style="Standard.TEntry")
entryCPEndYear.place(relx=.25, rely=.18, relwidth=.08, relheight=.04)
entryCPEndYear.config(validate="focusout", validatecommand=(eYearVal, '%P'))
entryCPStartMonth=ttk.Entry(frameConstructProtocol, textvariable=txtMonthStart, style="Standard.TEntry")
entryCPStartMonth.place(relx=.35, rely=.12, relwidth=.08, relheight=.04)
entryCPStartMonth.config(validate="focusout", validatecommand=(sMonthVal, '%P'))
entryCPEndMonth=ttk.Entry(frameConstructProtocol, textvariable=txtMonthEnd, style="Standard.TEntry")
entryCPEndMonth.place(relx=.35, rely=.18, relwidth=.08, relheight=.04)
entryCPEndMonth.config(validate="focusout", validatecommand=(eMonthVal, '%P'))
entryCPStartDay=ttk.Entry(frameConstructProtocol, textvariable=txtDayStart, style="Standard.TEntry")
entryCPStartDay.place(relx=.45, rely=.12, relwidth=.08, relheight=.04)
entryCPStartDay.config(validate="focusout", validatecommand=(sDayVal, '%P'))
entryCPEndDay=ttk.Entry(frameConstructProtocol, textvariable=txtDayEnd, style="Standard.TEntry")
entryCPEndDay.place(relx=.45, rely=.18, relwidth=.08, relheight=.04)
entryCPEndDay.config(validate="focusout", validatecommand=(eDayVal, '%P'))
entryCPStartHour=ttk.Entry(frameConstructProtocol, textvariable=txtHourStart, style="Standard.TEntry")
entryCPStartHour.place(relx=.55, rely=.12, relwidth=.08, relheight=.04)
entryCPStartHour.config(validate="focusout", validatecommand=(sHourVal, '%P'))
entryCPEndHour=ttk.Entry(frameConstructProtocol, textvariable=txtHourEnd, style="Standard.TEntry")
entryCPEndHour.place(relx=.55, rely=.18, relwidth=.08, relheight=.04)
entryCPEndHour.config(validate="focusout", validatecommand=(eHourVal, '%P'))
entryCPStartMinute=ttk.Entry(frameConstructProtocol, textvariable=txtMinuteStart, style="Standard.TEntry")
entryCPStartMinute.place(relx=.65, rely=.12, relwidth=.08, relheight=.04)
entryCPStartMinute.config(validate="focusout", validatecommand=(sMinuteVal, '%P'))
entryCPEndMinute=ttk.Entry(frameConstructProtocol, textvariable=txtMinuteEnd, style="Standard.TEntry")
entryCPEndMinute.place(relx=.65, rely=.18, relwidth=.08, relheight=.04)
entryCPEndMinute.config(validate="focusout", validatecommand=(eMinuteVal, '%P'))
entryCPStartSecond=ttk.Entry(frameConstructProtocol, textvariable=txtSecondStart, style="Standard.TEntry")
entryCPStartSecond.place(relx=.75, rely=.12, relwidth=.08, relheight=.04)
entryCPStartSecond.config(validate="focusout", validatecommand=(sSecondVal, '%P'))
entryCPEndSecond=ttk.Entry(frameConstructProtocol, textvariable=txtSecondEnd, style="Standard.TEntry")
entryCPEndSecond.place(relx=.75, rely=.18, relwidth=.08, relheight=.04)
entryCPEndSecond.config(validate="focusout", validatecommand=(eSecondVal, '%P'))
entryCPName=ttk.Entry(frameConstructProtocol, textvariable=txtProtocolName, style="Standard.TEntry")
entryCPName.place(relx=.25, rely=.84, relwidth=.4, relheight=.04)
fieldCPFocusType = ttk.Combobox(frameConstructProtocol, value=datafile.listTypeDeviceGetter(), style="Standard.TCombobox")
fieldCPFocusType.current(0)
fieldCPFocusType.bind("<<ComboboxSelected>>", focusTypeChooser)
fieldCPFocusType.place(relx=.25, rely=.30, relwidth=.18, relheight=.04)
fieldCPFocusObject = ttk.Combobox(frameConstructProtocol, style="Standard.TCombobox")
fieldCPFocusObject.bind("<<ComboboxSelected>>", focusObjectChooser)
fieldCPFocusObject.place(relx=.45, rely=.30, relwidth=.28, relheight=.04)
fieldCPFocusPosition = ttk.Combobox(frameConstructProtocol, style="Standard.TCombobox")
fieldCPFocusPosition.place(relx=.75, rely=.30, relwidth=.18, relheight=.04)
fieldCPConditionType = ttk.Combobox(frameConstructProtocol, value=datafile.listTypeStateGetter(), style="Standard.TCombobox")
fieldCPConditionType.current(0)
fieldCPConditionType.bind("<<ComboboxSelected>>", conditionTypeChooser)
fieldCPConditionType.place(relx=.25, rely=.36, relwidth=.18, relheight=.04)
fieldCPConditionObject = ttk.Combobox(frameConstructProtocol, style="Standard.TCombobox")
fieldCPConditionObject.bind("<<ComboboxSelected>>", conditionObjectChooser)
fieldCPConditionObject.place(relx=.45, rely=.36, relwidth=.28, relheight=.04)
fieldCPConditionPosition = ttk.Combobox(frameConstructProtocol, style="Standard.TCombobox")
fieldCPConditionPosition.place(relx=.75, rely=.36, relwidth=.18, relheight=.04)
checkCPCondition = ttk.Checkbutton(frameConstructProtocol, variable = intFlagCond, style ="Standard.TCheckbutton", onvalue=1, offvalue=0)
checkCPCondition.place(relx=.19, rely=.36, relwidth=.04, relheight=.04)




## accept & cancel buttons
buttonCPAccept = ttk.Button(frameConstructProtocol, text="Accept", style="Accept.TButton", command=protocolConstructAccepter)
buttonCPAccept.place(relx=.02, rely=.92, relwidth=.1, relheight=.04)
buttonCPCancel = ttk.Button(frameConstructProtocol, text="Cancel", style="Cancel.TButton", command=canceller)
buttonCPCancel.place(relx=.14, rely=.92, relwidth=.1, relheight=.04)







# widgets for frameResultViewer
## banner
bannerResultViewL=ttk.Label(frameViewResult, text="Results / Mode", style="Result.TLabel")
bannerResultViewL.place(relx=.0, rely=0, relwidth=.5, relheight=.04)
bannerResultViewR=ttk.Label(frameViewResult, textvariable=txtvarActive, style="Result.TLabel", anchor=E)
bannerResultViewR.place(relx=.5, rely=0, relwidth=.5, relheight=.04)
## labels
labelRVDatafile=ttk.Label(frameViewResult, text="Datafile", style="Result.TLabel")
labelRVDatafile.place(relx=.02, rely=.06, relwidth=.2, relheight=.04)
labelRVProtocol=ttk.Label(frameViewResult, text="Protocol", style="Result.TLabel")
labelRVProtocol.place(relx=.02, rely=.12, relwidth=.2, relheight=.04)
labelRVMode=ttk.Label(frameViewResult, text="Mode", style="Result.TLabel")
labelRVMode.place(relx=.02, rely=.18, relwidth=.2, relheight=.04)
labelRVDatafileName=ttk.Label(frameViewResult, textvariable=txtvarFile, style="Result.TLabel")
labelRVDatafileName.place(relx=.25, rely=.06, relwidth=.73, relheight=.04)
labelRVProtocolName=ttk.Label(frameViewResult, textvariable=txtvarProtocol, style="Result.TLabel")
labelRVProtocolName.place(relx=.25, rely=.12, relwidth=.73, relheight=.04)
## input fields
fieldRVMode = ttk.Combobox(frameViewResult, value=datafile.listModeGetter(), style="Standard.TCombobox")
fieldRVMode.current(0)
fieldRVMode.place(relx=.25, rely=.18, relwidth=.73, relheight=.04)
## accept & cancel buttons
buttonRVAccept = ttk.Button(frameViewResult, text="Accept", style="Accept.TButton", command=resultViewAccepter)
buttonRVAccept.place(relx=.02, rely=.92, relwidth=.1, relheight=.04)
buttonRVCancel = ttk.Button(frameViewResult, text="Cancel", style="Cancel.TButton", command=canceller)
buttonRVCancel.place(relx=.14, rely=.92, relwidth=.1, relheight=.04)



root.mainloop()

